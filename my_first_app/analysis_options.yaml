# This file configures the analyzer, which statically analyzes Dart code to
# check for errors, warnings, and lints.
#
# The issues identified by the analyzer are surfaced in the UI of Dart-enabled
# IDEs (https://dart.dev/tools#ides-and-editors). The analyzer can also be
# invoked from the command line by running `flutter analyze`.

# The following line activates a set of recommended lints for Flutter apps,
# packages, and plugins designed to encourage good coding practices.
include: package:flutter_lints/flutter.yaml

linter:
  # The lint rules applied to this project can be customized in the
  # section below to disable rules from the `package:flutter_lints/flutter.yaml`
  # included above or to enable additional rules. A list of all available lints
  # and their documentation is published at https://dart.dev/lints.
  #
  # Instead of disabling a lint rule for the entire project in the
  # section below, it can also be suppressed for a single line of code
  # or a specific dart file by using the `// ignore: name_of_lint` and
  # `// ignore_for_file: name_of_lint` syntax on the line or in the file
  # producing the lint.
  rules:
    # Style rules
    prefer_single_quotes: true
    prefer_expression_function_bodies: true
    prefer_const_constructors: true
    prefer_const_declarations: true
    require_trailing_commas: true
    directives_ordering: true
    curly_braces_in_flow_control_structures: true
    avoid_print: true
    use_key_in_widget_constructors: true
    use_full_hex_values_for_flutter_colors: true
    package_api_docs: true
    always_declare_return_types: true

# 추가 포매팅 설정
dart_style:
  line_length: 80  # 한 줄의 최대 길이
  indent: 2        # 들여쓰기 간격

# Additional information about this file can be found at
# https://dart.dev/guides/language/analysis-options

analyzer:
  language:
    strict-casts: true
    strict-inference: true
    strict-raw-types: true
